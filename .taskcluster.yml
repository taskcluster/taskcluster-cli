version: 1

policy:
  pullRequests: public

tasks:
  # linting
  - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "synchronize"]'
    then:
      $if: 'event.pull_request.base.ref == "master"'
      then:
        provisionerId: aws-provisioner-v1
        workerType: github-worker
        taskId: {$eval: as_slugid("pr_task")}
        created: {$fromNow: ''}
        deadline: {$fromNow: '1 hour'}
        payload:
          maxRunTime: 3600
          image: 'golang:1.8'
          command:
            - /bin/bash
            - '-c'
            - >-
              mkdir -p  /go/src/github.com/taskcluster/taskcluster-cli
              && cd  /go/src/github.com/taskcluster/taskcluster-cli
              && git init
              && git fetch ${event.pull_request.head.repo.git_url} ${event.pull_request.head.ref}
              && git checkout ${event.pull_request.head.sha}
              && make lint
        metadata:
          name: "TaskCluster GitHub Lint Checks"
          description: "Linting"
          owner: ${event.pull_request.user.login}@users.noreply.github.com
          source: ${event.repository.url}
    
    $else:
      $if: 'tasks_for == "github-push"'
      then:
        $if: 'event.ref == "refs/heads/master"'
        then:
          provisionerId: aws-provisioner-v1
          workerType: github-worker
          taskId: {$eval: as_slugid("push_task")}
          created: {$fromNow: ''}
          deadline: {$fromNow: '1 hour'}
          payload:
            maxRunTime: 3600
            image: 'golang:1.8'
            command:
              - /bin/bash
              - '-c'
              - >-
                mkdir -p  /go/src/github.com/taskcluster/taskcluster-cli
                && cd  /go/src/github.com/taskcluster/taskcluster-cli
                && git init
                && git fetch ${event.repository.url} ${event.ref}
                && git checkout ${event.after}
                && make lint
          metadata:
            name: "TaskCluster GitHub Lint Checks"
            description: "All non-integration tests"
            owner: ${event.pusher.name}@users.noreply.github.com
            source: ${event.repository.url}

# testing
  - $if: 'tasks_for == "github-pull-request" && event["action"] in ["opened", "reopened", "synchronize"]'
    then:
      $if: 'event.pull_request.base.ref == "master"'
      then:
        provisionerId: aws-provisioner-v1
        workerType: github-worker
        taskId: {$eval: as_slugid("pr_task")}
        created: {$fromNow: ''}
        deadline: {$fromNow: '1 hour'}
        payload:
          maxRunTime: 3600
          image: 'golang:1.8'
          command:
            - /bin/bash
            - '-c'
            - >-
              mkdir -p  /go/src/github.com/taskcluster/taskcluster-cli
              && cd  /go/src/github.com/taskcluster/taskcluster-cli
              && git init
              && git fetch ${event.pull_request.head.repo.git_url} ${event.pull_request.head.ref}
              && git checkout ${event.pull_request.head.sha}
              && make test
          artifacts:
            public/taskcluster-linux:
            path: /go/src/github.com/taskcluster/taskcluster-cli/taskcluster
            type: file
        metadata:
          name: "TaskCluster GitHub Lint Checks"
          description: "Linting"
          owner: ${event.pull_request.user.login}@users.noreply.github.com
          source: ${event.repository.url}
      
    $else:
      $if: 'tasks_for == "github-push"'
      then:
        $if: 'event.ref == "refs/heads/master"'
        then:
          provisionerId: aws-provisioner-v1
          workerType: github-worker
          taskId: {$eval: as_slugid("push_task")}
          created: {$fromNow: ''}
          deadline: {$fromNow: '1 hour'}
          payload:
            maxRunTime: 3600
            image: 'golang:1.8'
            command:
              - /bin/bash
              - '-c'
              - >-
                mkdir -p  /go/src/github.com/taskcluster/taskcluster-cli
                && cd  /go/src/github.com/taskcluster/taskcluster-cli
                && git init
                && git fetch ${event.repository.url} ${event.ref}
                && git checkout ${event.after}
                && make test
            artifacts:
              public/taskcluster-linux:
              path: /go/src/github.com/taskcluster/taskcluster-cli/taskcluster
              type: file
          metadata:
            name: "TaskCluster GitHub Lint Checks"
            description: "Linting"
            owner: ${event.pusher.name}@users.noreply.github.com
            source: ${event.repository.url}

# releasing
  - $if: 'tasks_for == "github-release"'
    then:
      provisionerId: aws-provisioner-v1
      workerType: github-worker
      taskId: {$eval: as_slugid("release_task")}
      created: {$fromNow: ''}
      deadline: {$fromNow: '1 hour'}
      scopes:
        - auth:aws-s3:read-write:downloads-taskcluster-net/taskcluster-cli/
      routes:
        - index.project.taskcluster.taskcluster-cli.latest
        - index.project.taskcluster.taskcluster-cli.${event.release.tag_name}
      payload:
        maxRunTime: 3600
        image: 'golang:1.8'
        features:
            taskclusterProxy: true
        command:
          - /bin/bash
          - '-c'
          - >-
            mkdir -p  /go/src/github.com/taskcluster/taskcluster-cli
            && cd  /go/src/github.com/taskcluster/taskcluster-cli
            && git init
            && git fetch ${event.repository.url} ${event.release.tag_name}
            && git checkout FETCH_HEAD
            && make prep release
        artifacts:
          public:
            path: /go/src/github.com/taskcluster/taskcluster-cli/build
            type: directory
      metadata:
        name: "Build and upload binaries for release"
        description: "Binary release"
        owner: ${event.release.author.login}@users.noreply.github.com
        source: ${event.repository.url}
  
  # uploading documentation
  - $if: 'tasks_for == "github-push"'
    then:
      $if: 'event.ref == "refs/heads/master"'
      then:
        provisionerId: aws-provisioner-v1
        workerType: github-worker
        taskId: {$eval: as_slugid("push_task")}
        created: {$fromNow: ''}
        deadline: {$fromNow: '1 hour'}
        scopes:
          - auth:aws-s3:read-write:taskcluster-raw-docs/taskcluster-cli/
        payload:
          maxRunTime: 3600
          image: taskcluster/upload-project-docs:latest
          features:
            taskclusterProxy:
              true
          command:
            - /bin/bash
            - '--login'
            - '-cx'
            - >-
              git clone ${event.repository.url} repo &&
              cd repo &&
              git config advice.detachedHead false &&
              git checkout ${event.after} &&
              export DOCS_PROJECT=taskcluster-cli DOCS_TIER=libraries DOCS_FOLDER=docs DOCS_README=README.md &&
              upload-project-docs
        metadata:
          name: "taskcluster-cli docs upload"
          description: "Upload documentation for this project"
          owner: ${event.pusher.name}@users.noreply.github.com
          source: ${event.repository.url}