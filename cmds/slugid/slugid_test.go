package slugid

import (
	"bytes"
	"fmt"
	"testing"

	"github.com/spf13/cobra"
	assert "github.com/stretchr/testify/require"
)

func TestSlugidNormal(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)
	cmd.Flags().Bool("nice", false, "")

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		buf.Reset()
		generate(cmd, []string{})

		slug := buf.String()
		slug = slug[0 : len(slug)-1]
		match := RegexpSlugV4.MatchString(slug)


		assert.True(match, fmt.Sprintf("Slug '%q' generated by generate() is invalid.", slug))
	}
}

func TestSlugidNice(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)
	cmd.Flags().Bool("nice", true, "")

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		buf.Reset()
		generate(cmd, []string{})

		slug := buf.String()
		slug = slug[0 : len(slug)-1]
		match := RegexpSlugNice.MatchString(slug)

		assert.True(match, fmt.Sprintf("Slug '%q' generated by generate() with flag --nice is invalid.", slug))
	}
}

func TestInsufficientDecode(t *testing.T) {
	assert := assert.New(t)

	err := decode(nil, []string{})

	assert.Error(err, "Expected error when decoding no slugs.")
}

func TestInvalidDecode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	slug := "abc"
	err := decode(cmd, []string{slug})

	assert.Error(err, fmt.Sprintf("Expected error when decoding invalid slug '%s'.", slug))
}

func TestValidDecode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := decode(cmd, []string{"FOH9mI0mQ1C90yoMo3ajsg"})
	expected := "14e1fd98-8d26-4350-bdd3-2a0ca376a3b2\n"

	assert.NoError(err, "Error decoding test slug.")
	assert.Equal(buf.String(), expected, "Got wrong output when decoding slug.")
}

func TestInsufficientEncode(t *testing.T) {
	assert := assert.New(t)

	err := encode(nil, []string{})

	assert.Error(err, "Expected error when encoding no uuids.")
}

func TestInvalidEncode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	uuid := "xyz"
	err := encode(cmd, []string{uuid})

	assert.Error(err, fmt.Sprintf("Expected error when encoding invalid uuid '%s'.", uuid))
}

func TestValidEncode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := encode(cmd, []string{"14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"})
	expected := "FOH9mI0mQ1C90yoMo3ajsg\n"

	assert.NoError(err, "Error encoding test uuid.")
	assert.Equal(buf.String(), expected, "Got wrong output when encoding uuid.")
}
