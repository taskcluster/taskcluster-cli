package slugid

import (
	"bytes"
	"fmt"
	"io"
	"testing"

	"github.com/spf13/cobra"
	assert "github.com/stretchr/testify/require"
)

func TestSlugidV4(t *testing.T) {
	assert := assert.New(t)

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		slug := generateV4()
		match := RegexpSlugV4.MatchString(slug)
		assert.True(match, fmt.Sprintf("Slug %q generated by v4() is invalid.", slug))
	}
}

func TestSlugidNice(t *testing.T) {
	assert := assert.New(t)

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		slug := generateNice()
		match := RegexpSlugNice.MatchString(slug)
		assert.True(match, fmt.Sprintf("Slug %q generated by nice() is invalid.", slug))
	}
}

func TestSlugidValidDecode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := decode(cmd, []string{"FOH9mI0mQ1C90yoMo3ajsg"})
	assert.NoError(err, "Error decoding test slug.")

	expected := "14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"
	actual, err := buf.ReadString('\n')
	if err != io.EOF {
		assert.NoError(err, "Error catching output from buffer.")
	}
	// We must remove the newline
	actual = actual[0 : len(actual)-1]

	assert.Equal(expected, actual, "Got wrong output when decoding slug.")
}

func TestInsufficientDecode(t *testing.T) {
	assert := assert.New(t)

	err := decode(nil, []string{})

	assert.Error(err, "Expected error when decoding no slugs.")
}

func TestSlugidInvalidDecode(t *testing.T) {
	assert := assert.New(t)

	slug := "abc"

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := decode(cmd, []string{slug})

	assert.Error(err, fmt.Sprintf("Expected error when decoding invalid slug '%s'.", slug))
}

func TestSlugidValidEncode(t *testing.T) {
	assert := assert.New(t)

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := encode(cmd, []string{"14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"})
	assert.NoError(err, "Error encoding test uuid.")

	expected := "FOH9mI0mQ1C90yoMo3ajsg"
	actual, err := buf.ReadString('\n')
	if err != io.EOF {
		assert.NoError(err, "Error catching output from buffer.")
	}
	// We must remove the newline
	actual = actual[0 : len(actual)-1]

	assert.Equal(expected, actual, "Got wrong output when encoding uuid.")
}

func TestSlugidInvalidEncode(t *testing.T) {
	assert := assert.New(t)

	uuid := "xyz"

	buf := &bytes.Buffer{}
	cmd := &cobra.Command{}
	cmd.SetOutput(buf)

	err := encode(cmd, []string{uuid})

	assert.Error(err, fmt.Sprintf("Expected error when encoding invalid uuid '%s'.", uuid))
}

func TestInsufficientEncode(t *testing.T) {
	assert := assert.New(t)

	err := encode(nil, []string{})

	assert.Error(err, "Expected error when encoding no uuids.")
}
