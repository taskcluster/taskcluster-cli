package slugid

import (
	"fmt"
	"testing"

	assert "github.com/stretchr/testify/require"
)

func TestSlugidV4(t *testing.T) {
	assert := assert.New(t)

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		slug, _ := generateV4()
		match := RegexpSlugV4.MatchString(slug)
		assert.True(match, fmt.Sprintf("Slug %q generated by v4() is invalid.", slug))
	}
}

func TestSlugidNice(t *testing.T) {
	assert := assert.New(t)

	// Let's test 1000 generated slugs, to increase confidence
	for i := 0; i < 1000; i++ {
		slug, _ := generateNice()
		match := RegexpSlugNice.MatchString(slug)
		assert.True(match, fmt.Sprintf("Slug %q generated by nice() is invalid.", slug))
	}
}

func TestSlugidValidDecode(t *testing.T) {
	assert := assert.New(t)

	out, err := decode("FOH9mI0mQ1C90yoMo3ajsg")
	expected := "14e1fd98-8d26-4350-bdd3-2a0ca376a3b2"

	assert.NoError(err, fmt.Sprintf("Error decoding test slug.\n%s", err))
	assert.Equal(out, expected, fmt.Sprintf("Got wrong output when decoding slug. Expected %s, got %s", expected, out))
}

func TestSlugidInvalidDecode(t *testing.T) {
	assert := assert.New(t)

	slug := "abc"

	_, err := decode(slug)

	assert.Error(err, fmt.Sprintf("Expected error when decoding invalid slug '%s'.", slug))
}

func TestSlugidValidEncode(t *testing.T) {
	assert := assert.New(t)

	out, err := encode("14e1fd98-8d26-4350-bdd3-2a0ca376a3b2")
	expected := "FOH9mI0mQ1C90yoMo3ajsg"

	assert.NoError(err, fmt.Sprintf("Error encoding test uuid.\n%s", err))
	assert.Equal(out, expected, fmt.Sprintf("Got wrong output when encoding uuid. Expected %s, got %s", expected, out))
}

func TestSlugidInvalidEncode(t *testing.T) {
	assert := assert.New(t)

	uuid := "xyz"

	_, err := encode(uuid)

	assert.Error(err, fmt.Sprintf("Expected error when encoding invalid uuid '%s'.", uuid))
}
